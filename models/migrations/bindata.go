// Code generated by go-bindata.
// sources:
// models/sql/1560510971_initial_schema.down.sql
// models/sql/1560510971_initial_schema.up.sql
// models/sql/lock.json
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1560510971_initial_schemaDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x72\x75\xf7\xf4\xb3\xe6\xe2\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\x2d\x4e\x2d\x2a\x46\x15\x2a\x4a\x2d\xc8\x2f\xce\x2c\xc9\x2f\xca\x4c\x45\x93\x29\x28\xcd\xc9\x89\x2f\x4a\x2d\x2c\x4d\x2d\x2e\x89\x2f\x4a\x2d\xcb\x4c\x2d\xc7\xa7\x22\x39\x3f\x37\x37\x35\xaf\x04\x8f\x12\x34\xa9\xfc\xa2\xf4\xc4\xbc\xcc\xaa\xc4\x92\xcc\xfc\x3c\x34\xa9\xcc\xe2\xe2\xd2\x54\x1c\x26\x82\xe5\x40\x62\xce\xfe\xbe\xbe\x9e\x21\xd6\x5c\x80\x00\x00\x00\xff\xff\xa6\x0c\xa3\xe3\xe8\x00\x00\x00")

func _1560510971_initial_schemaDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1560510971_initial_schemaDownSql,
		"1560510971_initial_schema.down.sql",
	)
}

func _1560510971_initial_schemaDownSql() (*asset, error) {
	bytes, err := _1560510971_initial_schemaDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1560510971_initial_schema.down.sql", size: 232, mode: os.FileMode(509), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1560510971_initial_schemaUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\xcf\x6e\xdc\x36\x13\x3f\x7b\x9f\x42\xc7\xef\x03\xf2\x06\x39\x39\x85\x51\x18\xb5\x9d\xc2\x70\x0f\x41\x51\x10\x23\x71\x24\x4d\x96\x22\x15\xce\xc8\x9b\xf5\xd3\x17\xd4\xca\x12\x25\x51\x4e\x6c\xb7\x89\x7b\x33\xe7\x37\xe2\x0e\x7f\xf3\xdf\x1f\x2e\x7e\xbd\xbc\x79\xbf\xdb\xfd\x72\x7b\x71\x7e\x77\x91\xdd\x9d\x7f\xb8\xba\xc8\x88\xb9\x43\xce\xfe\xb7\x3b\xdb\x83\x31\xf0\x55\x91\xce\x18\x3d\x81\xc9\x6e\x3e\xde\x65\x37\x7f\x5c\x5d\x65\xbf\xdf\x5e\x5e\x9f\xdf\x7e\xca\x7e\xbb\xf8\xf4\x6e\x77\x46\x3a\xcb\xa9\x22\x2b\xef\x76\x67\xb6\x6b\x72\xf4\xd3\x99\x05\x04\x33\xc1\xaf\xe1\x60\x5c\xb1\x47\x9d\xe5\xce\x19\x04\xfb\x6e\x77\x26\x24\x66\x44\x73\xa7\x8f\x8f\x7f\x17\xae\x69\xd0\x0a\x4f\x17\x15\xc6\x31\x6a\x05\x92\x09\x35\xc8\x02\x4d\x2b\x0f\x41\xee\x11\x24\x05\x74\xad\x4e\x03\xb5\x34\xa6\xf3\xe6\xf1\xa7\xac\xd3\x18\xde\x38\x1c\x3d\xb6\x8e\x49\x9c\x3f\x2a\x77\xb0\xe8\x7b\xf9\xf8\xf2\xb9\x82\x85\x06\x57\xb8\x81\x1c\x0d\xf7\xe2\x3f\xff\x8a\x81\x8e\xd1\xab\x91\xab\x15\x62\x5c\x45\x76\x75\x1b\x30\x53\x65\x11\xd3\x1f\x8e\xe8\xd3\x1f\x73\xf6\x99\x9d\xcd\x63\x68\xa0\x33\x3f\xa6\x2f\x9e\xe0\xf4\xcd\x0d\x19\x64\x71\x76\xc3\xae\x09\x9e\x3c\x3c\xe2\xbb\xff\xbf\xdf\xa5\x62\x4e\x8d\x4e\x7f\x69\xec\xcd\x3d\x19\xc7\x93\x47\x28\x84\x9c\x1d\x98\x78\x51\xdc\x40\x27\xb5\xf3\x0a\x98\x5d\x41\x10\x6e\x7b\xbc\x7d\x11\x51\x2f\x72\xf4\x89\x82\x59\xfa\x6c\x44\xdd\x0b\xc2\x32\x41\xb9\xf3\x15\x58\x7a\x80\x13\x2b\xcf\x60\x7c\x32\xff\x69\xfa\xe1\x1e\x04\xbc\x8a\x78\x59\x26\xde\xa3\x99\xa7\x7c\x6f\xc1\x8e\xee\xca\x8d\xab\xa2\xa2\x31\x23\x1b\x1b\xa0\xf1\x0e\x8d\x5c\x78\x6a\x63\xbc\xed\x72\x43\x85\xea\xf9\x98\x8c\x1b\xa4\x15\x71\x5c\x54\x4a\x67\x8c\x3b\xa0\x5f\x89\xc8\x56\x51\xe9\x79\x76\xa8\x88\x13\x30\xaa\xf5\x74\x0f\x82\x4b\x53\x82\xff\xf4\x16\xf8\x28\x5e\x18\xaa\x89\xf7\xaa\x63\xa8\x30\x32\xcb\x19\x03\xb9\xf3\x20\x2e\x7e\x40\x4e\xc6\x90\xad\xd4\x8c\x27\x39\xb6\x23\xd7\x72\x70\xaa\x84\x42\x9c\x57\x1e\xbf\x74\xe4\x31\x64\x9d\x42\x0b\xb9\x99\xaa\x73\x22\x64\xda\xce\x98\xfe\x13\xe4\x57\x24\xe9\x53\x0d\x62\xbb\x1f\x3c\xdb\x05\x5b\xfd\xa2\x41\x5f\xa5\xe4\xda\x43\x29\x51\x6b\x3a\xe9\x2d\x05\x81\xa2\x94\x4c\xcd\x9e\xd1\x8b\xfb\x72\x46\xa2\xb8\x86\x27\xba\x5a\xaf\x13\x09\x40\x6b\x3a\xa5\xe4\xe4\x7b\x34\xb8\x10\x15\x35\xd8\xf0\x8a\x32\xd4\xd9\x49\xbc\x48\x30\x8f\xf7\x84\x07\xb5\xfe\xd5\x06\xc8\x0a\x90\x45\xaf\x0a\xb0\xaa\x71\x9a\xca\x63\xf4\xac\xed\x4a\xf7\xb6\x9b\xe5\xe0\xdb\xad\xa6\x36\xc1\x3f\xb6\xd7\x0e\x29\x83\x5a\x9d\x3c\x12\xea\xcd\x4a\xe9\x35\x1d\x35\xb8\x1e\x41\x8f\xa1\xb6\x02\x3c\x96\x69\xa0\xe7\x3f\x0d\x05\x9e\xb7\x6e\xfb\x86\xd7\x97\x5a\x49\xd7\xe7\xc0\x98\xb4\xb8\x07\x52\x16\xf7\x40\xda\xe2\x1e\x4a\x5a\x3c\xdc\xf6\x0d\x8b\x97\x5a\xdf\xd5\x42\xe3\x7a\xf8\x4f\x0f\x2f\x64\x83\x39\xe6\xa8\xc4\x45\xa5\x3d\xaa\x88\x2d\x48\x3d\x76\x41\x2a\x4b\x55\x77\x76\x3f\xf5\xc0\xc8\xb2\xa1\x0c\xc4\x3f\xd6\xbf\x33\xa4\xf5\xd4\x94\x7c\xf8\x2b\x34\xad\x15\x34\xd4\xb1\xc9\xb6\x51\x77\x85\xbc\xfd\x31\x6b\xc6\xcc\x8f\x9b\xb6\x12\x0e\xf9\x37\xc6\x5c\xee\xf2\x86\x24\xdd\x0f\x97\xbe\x5a\xb0\x39\x6b\x60\xff\x25\x6a\x47\x7d\x7a\xc5\xd6\x3a\xa7\x34\x9e\x4c\xcb\xf0\xaa\x58\x90\x18\x39\x6b\xd7\x60\x1b\x66\xb3\xb1\xcf\x6b\x54\xae\x54\x85\xb3\xba\x2b\x64\x4c\x06\x8d\x25\x74\x46\x54\xee\xc1\x16\x63\xf6\x36\xc0\x82\x7e\x21\xdc\xcc\x9b\xb6\xe3\xfa\x35\xeb\x6e\x61\x42\x13\x89\x04\x15\x49\x7c\x6c\xc8\x7b\x37\x1b\xdb\x99\xeb\xf8\x74\x6f\xa3\x93\x01\x5b\x75\xd1\xcb\x4b\xe7\xf7\xd1\x20\x11\x8e\xac\x0a\xd7\x59\x89\xc8\x46\x39\x38\xbf\x5f\x8a\x5d\x8b\x56\x9d\xfe\xf9\xb0\x84\x58\xc0\x57\xf0\x80\x7e\x8d\x74\x79\xf0\x46\x9e\x80\x0e\x20\x45\x9d\xfa\x84\x1e\xa2\x21\x1a\x3a\x71\x8a\x2c\xc5\xa3\x5f\x8b\xbe\x21\xe6\x59\x1d\x83\xb0\x15\x28\x8f\x7d\xa3\xe8\x07\x89\x78\x5e\xea\x41\xfe\xd2\x01\xd7\x1b\x60\x3c\x12\xc6\xff\x00\x71\x2d\x15\xa9\xf9\x07\x7c\x51\xd3\xfd\x6c\x00\xd5\xc4\xb3\x09\x3d\xd0\x4f\x05\x5a\xc6\xd1\xca\x61\x7b\x88\x34\x6a\xe0\x81\xd4\x85\xf0\x40\x7b\x5a\x88\x42\x08\x2f\xd5\x5a\xef\x3e\x63\x21\x4b\xb1\x76\x07\x6b\x1c\x68\x5e\x1b\xa3\x04\x9b\xd6\x44\xc5\xa4\x22\xa1\xca\x3a\xbf\x46\x04\xa1\x99\xf7\x25\xf0\x68\xa7\x7c\x61\xd7\xf9\x62\x7a\x5d\x5f\x2f\xd2\x65\xe9\x04\x8d\x5b\xce\x1a\x4a\x97\xac\x78\x09\xde\xb8\x38\xd6\xf8\xae\x7a\x14\x2a\xe4\xcf\x59\xa8\x2b\x3f\xa8\xa4\x2b\xd9\x4b\x77\xec\x9a\xfc\x72\xef\xc9\xc9\xbd\xa5\x75\x9b\x3b\x6e\xd1\xea\xe4\x26\x1e\x2d\xbe\x4c\x82\x0a\x74\x43\x76\x96\x81\x3f\x6f\x55\x8f\x36\xf1\x30\xf5\xa0\x15\x1a\xfc\x30\x5f\xc2\x3f\x5e\x5f\x5f\xde\xbd\xdf\xfd\x1d\x00\x00\xff\xff\x42\x4e\x87\x5a\xaf\x15\x00\x00")

func _1560510971_initial_schemaUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1560510971_initial_schemaUpSql,
		"1560510971_initial_schema.up.sql",
	)
}

func _1560510971_initial_schemaUpSql() (*asset, error) {
	bytes, err := _1560510971_initial_schemaUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1560510971_initial_schema.up.sql", size: 5551, mode: os.FileMode(509), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _lockJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\xcd\x6e\xdc\x3a\x0f\xdd\xe7\x29\x06\xb3\xee\x13\x74\xfb\x2d\x3f\xa0\xb8\xb8\xe8\x5d\x15\x85\x40\xdb\xb4\xcd\x8e\x2c\xba\xfa\xc9\x74\x52\xf4\xdd\x2f\xec\xb8\xc9\x4c\x52\xe7\x06\x45\x12\xfb\xb8\xda\x14\x46\x0c\xa3\xe7\x8c\x24\xf2\x90\xa2\xa8\xef\x57\xbb\xdd\xfe\x23\x15\x96\xc3\xfe\xfd\xee\xd3\xd5\x6e\xb7\xdb\x7d\x1f\xff\xdd\xed\xf6\x1f\xa8\xe3\xfd\xfb\xdd\x5e\x42\x48\x1c\xf6\xef\x7e\xfe\xfd\x7f\x6a\x53\xe7\xee\x3f\x38\xff\xe8\xe2\xc3\x03\x59\x4b\xdf\x8c\x54\x77\xdf\x8e\xaf\x3f\x9e\xfa\xf1\x75\x60\x2f\x64\x2f\xdf\xfd\xe5\xa5\x23\x7f\xfa\x3f\x9f\xf6\xef\x77\xd1\x27\xbe\x78\xfb\x37\xd7\xec\xd9\x95\xc3\xe7\x2e\x59\x7b\xf1\xf2\x83\xc6\x0f\xc9\xda\x5f\x7d\xf7\x8f\x93\xaf\x69\xf8\xa8\x26\x1b\xf8\xee\xcd\x8f\x77\x4f\xe3\x9f\x03\x5e\x48\x23\x2e\x3e\x01\x7c\xfc\x6f\x7e\x07\xf9\xe3\x0f\x7f\x13\xba\x4b\x5d\xc1\x1e\x16\x7e\x88\x14\xf9\xd7\xe8\x23\x7f\x5b\x37\x76\xab\xe5\x81\xe7\x66\x8e\xaa\x65\x72\xab\xc6\x1f\x25\x5a\xd4\xdf\xbe\xd0\xea\x04\x0a\xbd\xd4\xae\x63\x17\x03\xec\x9a\x2d\xad\x06\xae\x0c\xc5\x99\x01\x90\x8e\x43\xa4\xae\x8f\x37\xeb\xa6\xe1\x99\xe2\x06\x78\xa4\xbe\xda\x04\x8f\x36\x76\x36\x79\x0b\xba\xaa\x9d\x56\x3c\x2b\x80\x56\x8f\xde\x73\xaf\x41\xa2\xfa\x93\xd1\xa3\x9b\xd3\x13\xaf\x45\xe3\xa5\x64\xdc\x19\x0b\x37\xfc\x09\x92\x84\xa5\x82\xed\x8c\x73\x18\xb0\x7f\xfa\xbc\x66\xf4\x29\xb0\x9f\x5d\x06\xaf\xe7\xdb\x5e\x14\xbe\xd5\x46\x1c\xe6\xe4\xa1\x10\xa4\x71\x3c\x6f\x89\xd6\x3f\x04\x77\x14\x36\x30\x0c\x33\xcb\xf8\x4b\x50\x57\xac\x19\xff\xa4\xf0\x8a\x13\xf0\x3c\xba\xe7\x00\x3c\x91\x3a\xb1\x1c\xa2\x3a\xe4\x05\x7d\xcf\x61\x81\x80\xf3\xd9\x24\xa6\xa7\xcf\x57\x67\x94\x7e\x9d\x20\x33\x8f\x02\xb8\x9c\x28\x03\x88\x5a\xb1\x05\x3a\x70\xbe\xc3\x33\x95\x51\xd4\xbd\xb5\x33\xcc\x89\x82\x07\x3c\xb6\x92\x28\xa0\x14\x5b\xf5\x86\x42\xd0\x52\x68\x98\x5a\xa0\x2b\x03\x3b\xe3\x91\x43\xbd\x65\x5d\xf1\xa8\x45\x96\xd9\xfe\x79\x85\x84\x4d\x4e\x3b\xad\x41\xe0\xaa\x6f\xc8\xc9\x0d\x5d\xfa\xeb\x3f\x47\xdf\x2e\x60\x0f\x5e\xcc\x1e\x67\x6d\xbe\x10\x7a\xba\xa6\x48\xde\xe0\x7a\x72\x6c\x1d\xf2\xf6\x36\xf7\x25\xb7\x82\x7b\x72\xa8\x81\x5d\x61\xb5\x01\x85\x6e\xb5\x44\x0e\x1c\xb8\x23\x41\x5d\xae\x15\x87\xd2\x4b\x0f\xfc\xeb\xf7\xa9\xb0\x52\x9a\x51\xf6\xc1\xba\xdc\x89\x44\x23\x01\xb8\x12\xa5\x56\x6b\xf5\xc8\x1e\x9d\x81\xb8\x19\x43\x0a\xc0\x20\x67\xc7\xd6\xc5\x23\x6a\x24\x6b\x7a\x2f\xd7\x14\x19\xdc\x48\xe9\xd1\x71\xb5\x11\x2e\x3f\x59\x60\x5b\xdc\x4a\xc2\xc1\xa4\x40\xcd\x8c\xe4\x06\xa0\x50\xaa\xb5\x54\xa8\xa7\xa8\xc0\x8e\xa3\x10\x6b\xc5\x35\x06\x59\x0a\xc6\x01\x28\x28\xf4\xa3\x9a\x9a\xca\xa8\xde\x78\xfe\x9a\xc4\x73\xc7\x2e\x1a\x76\x54\xd8\x55\xd7\x84\x4f\x4f\x4f\xa7\x01\xfb\x64\xed\xc8\x8b\x43\xde\xe6\xc6\xb2\x0b\xf9\x3c\xc8\x62\xd8\xf3\x79\x8a\x45\xa0\xe7\x00\x64\x5d\x3c\x36\x72\x3c\xa4\x63\xdf\x6c\x80\x46\xe5\xa9\x9e\xa1\xb0\x0a\x3d\xf2\xac\x51\x00\xc7\x3f\x68\xc2\x0d\x50\x30\xc8\xce\x79\x64\x31\x96\x6e\x4a\x34\xa1\x25\x50\x1a\xf8\x87\x07\xc7\x11\xc0\xc5\x4f\x55\x25\x4f\x54\x33\x02\x30\xa8\xd8\x32\x36\x83\xb2\x25\x37\xf8\xe6\x5a\xec\xdc\x11\x0b\x00\x16\xd8\xbb\xee\x9e\xaf\x85\x8f\x8f\x6b\xe1\xd1\x46\xa1\x23\x71\x91\xc4\xb1\x37\x25\x39\xd3\x69\x25\xf5\x4c\x24\x84\xe0\xac\x37\x53\x1b\x8b\x5d\x12\x94\x0b\x1b\x57\x43\x22\x9f\xa7\x5d\x1a\x3e\x70\x91\xf5\x94\x04\x80\x3e\x08\x79\xcf\x01\x78\x20\xf2\xc1\xe6\x55\x71\x40\x3d\xd8\x3c\xed\x69\x71\x65\x6e\xf5\xeb\x6c\xe9\xd0\xea\x99\xe4\x93\xc1\x2b\x21\xd1\x32\x55\x6f\x9f\x50\x7a\x51\xf4\x9e\x6b\x60\xf4\xa3\xc0\x03\xc6\x3f\x68\x24\x60\xf8\xdb\x08\x75\x1e\x52\xc1\x8d\x77\x0a\x0a\x8c\x6b\x8f\x46\xf4\xb0\xf6\x68\x44\x0f\x6c\x8f\x46\xfc\xb8\xf6\x68\x9a\x3c\x5b\xb0\x47\x0f\xa9\xac\xd8\x1e\x4d\x4f\xcf\xaf\x28\xcb\x0d\x54\x1e\x03\x07\xc8\x94\x63\x67\x64\xc5\x0d\xcb\xc9\x9e\x4c\x54\xd8\x11\x00\x2e\xd2\xea\x29\xb6\xa0\xd0\x2b\xa9\x6b\xd3\x26\x77\x00\xc5\x7f\x61\x7a\xa7\x6d\x3b\x60\x33\x34\xba\xc4\xd9\x7d\x2d\x00\x02\xea\x07\x8c\x64\x0d\x3c\x93\xa9\x9a\x06\xd6\x27\xdc\x8d\x04\x3a\x91\xdc\x62\x6b\x25\x3c\xb6\x52\xc3\xbb\x99\x32\x02\xec\x22\x9b\xbc\xfb\xbb\x28\xfe\x0b\xe5\x94\x3b\x6d\xad\x8a\xc5\xa6\x12\x22\xb7\xaa\x3c\xe7\x43\xa0\xd4\x2f\x76\x3e\x04\x38\x97\x10\x52\xd1\x49\xdc\x82\xcc\x42\x8f\x3b\xb0\xd5\x15\xf2\x71\x96\xac\x0c\xb3\x32\xcc\xca\x70\x93\xca\xf0\x8e\x8a\xe4\xbb\x38\xb3\x22\xcc\x7d\x34\x9f\xd3\x45\x6d\x30\xc7\xc0\xf8\xf1\x7b\x22\xb6\xda\x71\x3f\xdb\x15\x6a\xf5\xf0\xcb\x61\xe5\x6a\x6d\x4a\x75\x55\x2a\x67\xa2\x8a\xf5\xa7\xd1\x2b\xae\x29\xd9\x68\x0a\x4f\xae\x44\xdd\x6f\xed\x28\x44\xf6\xd8\x1c\xb6\xb2\x9f\xd1\xa7\xd0\x6e\x80\xc6\x56\xb6\x65\xb0\xe3\xed\xd2\xaa\x63\xe0\x36\xe9\x8d\x44\x60\xf4\x9d\x78\xaf\xc8\x5d\xea\x43\x68\x81\xc1\x5f\x3b\x5c\xf0\x96\x5c\x93\x70\xc5\x5d\xad\x7e\xa6\x76\x0b\xe1\x44\xff\x80\x3e\x98\x52\xd3\xc3\xe0\x17\x29\x30\xe6\x78\x54\x7f\x00\x67\xa1\x3d\x3b\x33\x5e\xbb\x84\x3e\x1e\x21\x92\x6f\xe8\x86\x3d\x3c\x91\x54\x0c\x91\x73\x81\xcf\xe4\x48\xb1\x6c\xf1\x69\x04\xb9\xc1\xed\x0c\x4d\x29\xaa\x11\x27\xc0\xfd\xf2\x7a\xf6\x9d\x84\x80\x5c\x0b\x48\xd6\xea\xd1\x78\x1e\x8f\xc0\x8c\xcd\x0b\x70\x87\xe3\x96\x4b\xf8\x9a\x28\xb4\xdb\xe0\x72\xde\x47\x0f\x97\x4b\xd4\x5e\x4a\xd8\xa6\x30\xe4\xcb\x56\xae\x91\xdb\x62\x56\x12\xd6\xde\x28\xfd\xbf\x62\x22\x29\xd9\x85\x99\xe5\xbc\x7e\x23\x3b\xdd\x46\x81\xfb\xfb\xb7\x14\x26\x2d\x8e\xcd\xe1\x28\x07\xc1\x66\xd0\x53\x83\x3e\x08\xbd\xd7\x2f\x5c\xce\x76\x31\x04\x61\x51\xe9\xd1\x59\xa5\x0a\x98\xc6\x64\x55\x4d\xe4\xae\xb7\xb8\xd5\x59\x8d\x44\x69\x9c\x7a\x78\x22\x91\xa9\x83\x3e\x2c\x48\x9e\xe7\xa2\xe9\xf5\x3b\xe9\xa0\xc9\x97\xb0\x12\x63\xac\x26\x03\xae\x51\xbc\xc5\xff\xf6\x77\x14\xbd\x2c\x7e\xe0\x22\xcb\xf3\xcb\xc8\x91\xe7\xd1\x39\x0d\xf4\xe2\xc4\x14\xce\x5b\xe6\xfd\x39\x55\x89\xf9\x62\xf8\x45\xa0\x63\x57\x54\xe6\x8b\xe1\x97\x55\xe1\x7e\x1a\x00\xd8\x09\x04\x5c\xd2\x9a\xaf\xb6\x5f\x08\x7a\xbe\xda\x7e\x31\xec\xad\x78\xf0\xbb\x9e\x0a\x99\xe9\x8e\xb5\xfa\xdf\x3e\x5f\xca\xbf\x16\x12\xf9\x52\xfe\xe5\x19\x6c\xa5\xfe\x7c\x2b\x85\xdb\x21\x85\x9e\x5d\xb5\x01\x26\xc0\x77\x76\x07\x89\x6c\xa8\xea\xe6\x02\x79\x04\x07\x1d\x35\x92\x35\xd3\xee\x2d\xb8\xb7\xd3\xa3\xe3\x6a\x23\x5c\x7e\xb2\xc0\x76\xdd\x95\x84\x83\x49\x61\xb6\xd4\x1b\x80\x42\xa9\xd6\x52\xa1\x9e\xa2\x02\x2b\x90\x78\x54\x53\x53\x19\xd5\x1b\x4a\xb1\x65\x17\xe5\xa9\xa8\x6e\x15\x96\x6b\x7a\x9a\xf2\xc7\x57\xc3\xd3\x8f\x7f\x03\x00\x00\xff\xff\xa1\xdf\x56\x6d\x77\xb2\x00\x00")

func lockJsonBytes() ([]byte, error) {
	return bindataRead(
		_lockJson,
		"lock.json",
	)
}

func lockJson() (*asset, error) {
	bytes, err := lockJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lock.json", size: 45687, mode: os.FileMode(509), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1560510971_initial_schema.down.sql": _1560510971_initial_schemaDownSql,
	"1560510971_initial_schema.up.sql": _1560510971_initial_schemaUpSql,
	"lock.json": lockJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"1560510971_initial_schema.down.sql": &bintree{_1560510971_initial_schemaDownSql, map[string]*bintree{}},
	"1560510971_initial_schema.up.sql": &bintree{_1560510971_initial_schemaUpSql, map[string]*bintree{}},
	"lock.json": &bintree{lockJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

